<?xml version="1.0" encoding="utf-8"?>
<!--
/**
 * Present.ly AIR application
 *
 * Copyright (c) 2008. All rights reserved.
 * Author: Akinwale Ariwodola
 * Version: 1.0
 *
 */
-->
<mx:Window xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:presently="com.presently.components.*" layout="absolute" width="352"
    height="75" backgroundColor="#000000" showFlexChrome="true" alwaysInFront="true"
    transparent="true" showTitleBar="false" showStatusBar="false" showGripper="false"
    creationComplete="handleCreationComplete(event)" visible="false" clipContent="true"
    showEffect="{revealEffect}" closing="handleClosing(event)" backgroundAlpha="0.0"
    horizontalScrollPolicy="off" verticalScrollPolicy="off" useHandCursor="true"
    mouseEnabled="true" mouseChildren="false" click="navigateToStatus(event)">
<mx:Script>
    <![CDATA[
        import com.presently.events.NotificationClickedEvent;
        import mx.events.CloseEvent;
        import mx.events.FlexEvent;
        import mx.managers.CursorManager;
        import com.presently.events.StatusTypeChangedEvent;
        import mx.binding.utils.BindingUtils;
        import com.presently.events.LookupEvent;
        import flash.net.navigateToURL;
        import com.presently.model.Status;

        [Bindable]
        private var _pStatus:Status;

        [Bindable]
        private var _stylesheet:StyleSheet = new StyleSheet();

        [Bindable]
        private var _currentStyleName:String;

        [Bindable]
        private var _ttl:uint = 15; // Number of seconds to display

        [Bindable]
        private var _xPos:Number;

        [Bindable]
        private var _yPos:Number;

        public static const NOTIFICATION_CLOSED:String = "notificationClosed";

        public function set stylesheet(css:StyleSheet):void {
            _stylesheet = css;
        }

        public function set ttl(value:uint):void {
            _ttl = value;
            if (_ttl < 1) {
                close();
            }
        }

        public function get ttl():uint {
            return _ttl;
        }

        public function set pStatus(value:Status):void {
            _pStatus = value;
            _pStatus.addEventListener(StatusTypeChangedEvent.STATUS_TYPE_CHANGED, handleStatusTypeChanged);

            resetStyle();
        }

        public function get pStatus():Status {
            return _pStatus;
        }

        public function resetStyle():void {
            if (_pStatus.isReply) {
                _currentStyleName = 'replyNotification';
            } else if (_pStatus.isDirectMessage) {
                _currentStyleName = 'directNotification';
            } else {
                _currentStyleName = 'defaultNotification';
            }

            if (main != null) {
                main.styleName = _currentStyleName;
            }
        }

        public function handleStatusTypeChanged(event:StatusTypeChangedEvent):void {
            var s:Status = Status(event.currentTarget);
            resetStyle();
        }

        private function handleLinkClick(event:TextEvent):void {
            if (event.text.substr(0, 7) == 'lookup;') {
                var username:String = event.text.substr(7);
                dispatchEvent(new LookupEvent(username));
            } else {
                navigateToURL(new URLRequest(event.text));
            }
        }

        private function handleCreationComplete(event:FlexEvent):void {
            this.move(_xPos, _yPos);
            resetStyle();
            this.visible = true;
        }

        public function setPosition(x:Number, y:Number):void {
            _xPos = x;
            _yPos = y;
        }

        private function handleClosing(event:Event):void {
            dispatchEvent(new Event(NOTIFICATION_CLOSED));
        }

        private function navigateToStatus(event:MouseEvent):void {
            dispatchEvent(new NotificationClickedEvent(_pStatus));
        }

    ]]>
</mx:Script>
<mx:HBox id="main" width="{this.width}" height="{this.height+5}" left="0" right="0" top="0"
    paddingLeft="6" paddingBottom="4" verticalAlign="middle" verticalScrollPolicy="off"
    borderStyle="solid" borderSides="bottom" borderColor="0x333333" cornerRadius="5">
    <presently:ProfileImage source="{_pStatus.profileImageUrl}"  />
    <mx:VBox width="100%" height="100%" paddingRight="10" paddingTop="2" verticalGap="0">
        <presently:MultilineText id="st" htmlText="{_pStatus.toHTMLString()}"
            width="100%" height="100%"  color="0xFFFFFF" verticalScrollPolicy="off"
            styleSheet="{_stylesheet}" link="handleLinkClick(event)" paddingTop="2" />
    </mx:VBox>
</mx:HBox>
<mx:Parallel id="revealEffect" duration="1000">
    <mx:WipeUp />
    <mx:Fade />
</mx:Parallel>
</mx:Window>
